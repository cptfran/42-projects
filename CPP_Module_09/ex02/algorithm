
STEP 1: group the elements of x into [n/2] pairs of elements
"You start by grouping the elements into ([n/2]) pairs. If there's an odd number of elements, one element will remain
unpaired."

STEP 2: determine the larger of the two elements in each pair
"For each pair, determine which element is larger and which is smaller."

STEP 3: Recursively sort the [n/2] larger elements form each pair
"This forms the initial "main chain" or sequence. Divide the list of larger elements into two halves.
Recursively sort each half. Merge the two sorted halves into a single sorted sequence.
In the context of the Ford-Johnson algorithm, when you're sorting the pairs based on the larger numbers (which you've
mentioned are already the first element of each pair), you should consider each pair as an indivisible unit during the
sorting process. This means that when you sort the pairs based on the larger numbers (the first element of each pair),
 you swap the whole pair as a unit, rather than just swapping the larger numbers within the pairs.

This approach ensures that the relationship between the larger and smaller numbers within each pair is maintained
throughout the sorting process. The "lower nums chain" or sequence of smaller numbers will indeed look different after
the sorting, as it will reflect the order of the pairs determined by the sorting of the larger numbers"

STEP 4: Create the main chain and pend
"This step involves inserting the smaller elements (from the initial pairs) into the sequence formed by the larger
elements. The insertion is done to maintain the sorted order. The method of insertion is where the algorithm gets more
complex and involves using previously determined positions to minimize comparisons."

STEP 5: Generate the order of insertion use jacobsthal squence
"The Jacobsthal sequence (or a similar method) can be used to optimize the order of insertion for the smaller elements.
However, this is not a universally described step in all explanations of the Ford-Johnson algorithm. The key idea is to
minimize the number of comparisons needed to insert the remaining elements into the sorted sequence."

STEP 6: insert the elements of the pend into the main chain
"The remaining elements (the smaller ones from the initial pairs) are inserted into the sorted sequence of larger
elements. The insertion should maintain the sorted order, and the goal is to do this with the minimum number of
comparisons."

Additional Clarifications:
"Main Chain and Pend: The terms "main chain" and "pend" are not universally used in descriptions of the Ford-Johnson
algorithm. Typically, the algorithm is described in terms of sorting a subset of elements (the larger ones from each
pair) and then efficiently inserting the remaining elements into this sorted subset."

Optimization Goal:
"The Ford-Johnson algorithm aims to reduce the total number of comparisons needed to sort a list, making it more
efficient than straightforward comparison-based sorting algorithms, especially for lists where comparisons are
expensive."

 if constexpr (std::is_same<ContainerBasic, std::vector<int>>::value) {
            std::cout << "Container is a std::vector<int>.\n";
        } else if constexpr (std::is_same<ContainerBasic, std::deque<int>>::value) {
            std::cout << "Container is a std::deque<int>.\n";
        } else {
            std::cout << "Container is of an unknown type.\n";
        }